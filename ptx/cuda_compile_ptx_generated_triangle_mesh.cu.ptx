//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-19324574
// Cuda compilation tools, release 7.0, V7.0.27
// Based on LLVM 3.4svn
//

.version 4.2
.target sm_20
.address_size 64

	// .globl	_Z14mesh_intersecti
.global .align 1 .b8 vertex_buffer[1];
.global .align 1 .b8 normal_buffer[1];
.global .align 1 .b8 texcoord_buffer[1];
.global .align 1 .b8 vindex_buffer[1];
.global .align 1 .b8 nindex_buffer[1];
.global .align 1 .b8 tindex_buffer[1];
.global .align 1 .b8 material_buffer[1];
.global .align 8 .b8 texcoord[12];
.global .align 8 .b8 geometric_normal[12];
.global .align 8 .b8 shading_normal[12];
.global .align 4 .b8 ray[36];
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 4 .b8 _ZN21rti_internal_typeinfo8texcoordE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo16geometric_normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14shading_normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3rayE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 1 .b8 _ZN21rti_internal_typename8texcoordE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename16geometric_normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename14shading_normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename3rayE[11] = {111, 112, 116, 105, 120, 58, 58, 82, 97, 121, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum8texcoordE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum16geometric_normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14shading_normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3rayE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic8texcoordE[19] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 116, 101, 120, 99, 111, 111, 114, 100, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic16geometric_normalE[27] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 103, 101, 111, 109, 101, 116, 114, 105, 99, 95, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic14shading_normalE[25] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 115, 104, 97, 100, 105, 110, 103, 95, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic3rayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121, 0};
.global .align 1 .b8 _ZN23rti_internal_annotation8texcoordE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation16geometric_normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14shading_normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3rayE[1];

.visible .entry _Z14mesh_intersecti(
	.param .u32 _Z14mesh_intersecti_param_0
)
{
	.reg .pred 	%p<25>;
	.reg .f32 	%f<132>;
	.reg .s32 	%r<44>;
	.reg .s64 	%rd<99>;


	ld.param.s32 	%rd4, [_Z14mesh_intersecti_param_0];
	mov.u64 	%rd26, vindex_buffer;
	cvta.global.u64 	%rd3, %rd26;
	mov.u32 	%r13, 1;
	mov.u32 	%r14, 12;
	mov.u64 	%rd25, 0;
	// inline asm
	call (%rd2), _rt_buffer_get_64, (%rd3, %r13, %r14, %rd4, %rd25, %rd25, %rd25);
	// inline asm
	ld.s32 	%rd10, [%rd2];
	mov.u64 	%rd27, vertex_buffer;
	cvta.global.u64 	%rd9, %rd27;
	ld.s32 	%rd16, [%rd2+4];
	ld.s32 	%rd22, [%rd2+8];
	// inline asm
	call (%rd8), _rt_buffer_get_64, (%rd9, %r13, %r14, %rd10, %rd25, %rd25, %rd25);
	// inline asm
	ld.f32 	%f17, [%rd8+8];
	ld.f32 	%f18, [%rd8+4];
	ld.f32 	%f19, [%rd8];
	// inline asm
	call (%rd14), _rt_buffer_get_64, (%rd9, %r13, %r14, %rd16, %rd25, %rd25, %rd25);
	// inline asm
	ld.f32 	%f20, [%rd14+8];
	ld.f32 	%f21, [%rd14+4];
	ld.f32 	%f22, [%rd14];
	// inline asm
	call (%rd20), _rt_buffer_get_64, (%rd9, %r13, %r14, %rd22, %rd25, %rd25, %rd25);
	// inline asm
	sub.ftz.f32 	%f23, %f22, %f19;
	sub.ftz.f32 	%f24, %f21, %f18;
	sub.ftz.f32 	%f25, %f20, %f17;
	ld.f32 	%f26, [%rd20+8];
	ld.f32 	%f27, [%rd20+4];
	ld.f32 	%f28, [%rd20];
	sub.ftz.f32 	%f29, %f19, %f28;
	sub.ftz.f32 	%f30, %f18, %f27;
	sub.ftz.f32 	%f31, %f17, %f26;
	mul.ftz.f32 	%f32, %f25, %f30;
	mul.ftz.f32 	%f33, %f24, %f31;
	sub.ftz.f32 	%f1, %f32, %f33;
	mul.ftz.f32 	%f34, %f23, %f31;
	mul.ftz.f32 	%f35, %f25, %f29;
	sub.ftz.f32 	%f2, %f34, %f35;
	mul.ftz.f32 	%f36, %f24, %f29;
	mul.ftz.f32 	%f37, %f23, %f30;
	sub.ftz.f32 	%f3, %f36, %f37;
	ld.global.f32 	%f38, [ray+12];
	ld.global.f32 	%f39, [ray+16];
	mul.ftz.f32 	%f40, %f39, %f2;
	fma.rn.ftz.f32 	%f41, %f38, %f1, %f40;
	ld.global.f32 	%f42, [ray+20];
	fma.rn.ftz.f32 	%f43, %f42, %f3, %f41;
	rcp.approx.ftz.f32 	%f44, %f43;
	ld.global.f32 	%f45, [ray];
	sub.ftz.f32 	%f46, %f19, %f45;
	ld.global.f32 	%f47, [ray+4];
	sub.ftz.f32 	%f48, %f18, %f47;
	ld.global.f32 	%f49, [ray+8];
	sub.ftz.f32 	%f50, %f17, %f49;
	mul.ftz.f32 	%f51, %f44, %f46;
	mul.ftz.f32 	%f52, %f44, %f48;
	mul.ftz.f32 	%f53, %f44, %f50;
	mul.ftz.f32 	%f54, %f39, %f53;
	mul.ftz.f32 	%f55, %f52, %f42;
	sub.ftz.f32 	%f56, %f54, %f55;
	mul.ftz.f32 	%f57, %f51, %f42;
	mul.ftz.f32 	%f58, %f53, %f38;
	sub.ftz.f32 	%f59, %f57, %f58;
	mul.ftz.f32 	%f60, %f52, %f38;
	mul.ftz.f32 	%f61, %f51, %f39;
	sub.ftz.f32 	%f62, %f60, %f61;
	mul.ftz.f32 	%f63, %f30, %f59;
	fma.rn.ftz.f32 	%f64, %f29, %f56, %f63;
	fma.rn.ftz.f32 	%f4, %f31, %f62, %f64;
	mul.ftz.f32 	%f65, %f24, %f59;
	fma.rn.ftz.f32 	%f66, %f23, %f56, %f65;
	fma.rn.ftz.f32 	%f5, %f25, %f62, %f66;
	mul.ftz.f32 	%f67, %f2, %f52;
	fma.rn.ftz.f32 	%f68, %f1, %f51, %f67;
	fma.rn.ftz.f32 	%f6, %f3, %f53, %f68;
	ld.global.f32 	%f69, [ray+32];
	setp.lt.ftz.f32	%p1, %f6, %f69;
	ld.global.f32 	%f70, [ray+28];
	setp.gt.ftz.f32	%p2, %f6, %f70;
	and.pred  	%p3, %p1, %p2;
	setp.ge.ftz.f32	%p4, %f4, 0f00000000;
	and.pred  	%p5, %p3, %p4;
	setp.ge.ftz.f32	%p6, %f5, 0f00000000;
	and.pred  	%p7, %p5, %p6;
	add.ftz.f32 	%f71, %f4, %f5;
	setp.le.ftz.f32	%p8, %f71, 0f3F800000;
	and.pred  	%p9, %p7, %p8;
	@!%p9 bra 	BB0_9;
	bra.uni 	BB0_1;

BB0_1:
	// inline asm
	call (%r15), _rt_potential_intersection, (%f6);
	// inline asm
	setp.eq.s32	%p10, %r15, 0;
	@%p10 bra 	BB0_9;

	mov.u64 	%rd39, nindex_buffer;
	cvta.global.u64 	%rd29, %rd39;
	// inline asm
	call (%rd28), _rt_buffer_get_64, (%rd29, %r13, %r14, %rd4, %rd25, %rd25, %rd25);
	// inline asm
	ld.u32 	%r3, [%rd28+8];
	ld.u32 	%r2, [%rd28+4];
	ld.u32 	%r1, [%rd28];
	mov.u64 	%rd40, normal_buffer;
	cvta.global.u64 	%rd38, %rd40;
	// inline asm
	call (%rd34, %rd35, %rd36, %rd37), _rt_buffer_get_size_64, (%rd38, %r13, %r14);
	// inline asm
	cvt.u32.u64	%r20, %rd34;
	setp.eq.s32	%p11, %r20, 0;
	setp.lt.s32	%p12, %r1, 0;
	or.pred  	%p13, %p11, %p12;
	setp.lt.s32	%p14, %r2, 0;
	or.pred  	%p15, %p13, %p14;
	setp.lt.s32	%p16, %r3, 0;
	or.pred  	%p17, %p15, %p16;
	mul.ftz.f32 	%f73, %f2, %f2;
	fma.rn.ftz.f32 	%f74, %f1, %f1, %f73;
	fma.rn.ftz.f32 	%f75, %f3, %f3, %f74;
	sqrt.approx.ftz.f32 	%f7, %f75;
	@%p17 bra 	BB0_4;
	bra.uni 	BB0_3;

BB0_4:
	rcp.approx.ftz.f32 	%f102, %f7;
	mul.ftz.f32 	%f129, %f1, %f102;
	mul.ftz.f32 	%f130, %f2, %f102;
	mul.ftz.f32 	%f131, %f3, %f102;
	bra.uni 	BB0_5;

BB0_3:
	cvt.s64.s32	%rd43, %r1;
	// inline asm
	call (%rd41), _rt_buffer_get_64, (%rd38, %r13, %r14, %rd43, %rd25, %rd25, %rd25);
	// inline asm
	ld.f32 	%f76, [%rd41+8];
	ld.f32 	%f77, [%rd41+4];
	ld.f32 	%f78, [%rd41];
	cvt.s64.s32	%rd49, %r2;
	// inline asm
	call (%rd47), _rt_buffer_get_64, (%rd38, %r13, %r14, %rd49, %rd25, %rd25, %rd25);
	// inline asm
	ld.f32 	%f79, [%rd47+8];
	ld.f32 	%f80, [%rd47+4];
	ld.f32 	%f81, [%rd47];
	cvt.s64.s32	%rd55, %r3;
	// inline asm
	call (%rd53), _rt_buffer_get_64, (%rd38, %r13, %r14, %rd55, %rd25, %rd25, %rd25);
	// inline asm
	ld.f32 	%f82, [%rd53+8];
	ld.f32 	%f83, [%rd53+4];
	ld.f32 	%f84, [%rd53];
	mul.ftz.f32 	%f85, %f5, %f84;
	mul.ftz.f32 	%f86, %f5, %f83;
	mul.ftz.f32 	%f87, %f5, %f82;
	fma.rn.ftz.f32 	%f88, %f4, %f81, %f85;
	fma.rn.ftz.f32 	%f89, %f4, %f80, %f86;
	fma.rn.ftz.f32 	%f90, %f4, %f79, %f87;
	mov.f32 	%f91, 0f3F800000;
	sub.ftz.f32 	%f92, %f91, %f4;
	sub.ftz.f32 	%f93, %f92, %f5;
	fma.rn.ftz.f32 	%f94, %f93, %f78, %f88;
	fma.rn.ftz.f32 	%f95, %f93, %f77, %f89;
	fma.rn.ftz.f32 	%f96, %f93, %f76, %f90;
	mul.ftz.f32 	%f97, %f95, %f95;
	fma.rn.ftz.f32 	%f98, %f94, %f94, %f97;
	fma.rn.ftz.f32 	%f99, %f96, %f96, %f98;
	sqrt.approx.ftz.f32 	%f100, %f99;
	rcp.approx.ftz.f32 	%f101, %f100;
	mul.ftz.f32 	%f129, %f101, %f94;
	mul.ftz.f32 	%f130, %f101, %f95;
	mul.ftz.f32 	%f131, %f101, %f96;

BB0_5:
	st.global.v2.f32 	[shading_normal], {%f129, %f130};
	st.global.f32 	[shading_normal+8], %f131;
	rcp.approx.ftz.f32 	%f103, %f7;
	mul.ftz.f32 	%f104, %f3, %f103;
	mul.ftz.f32 	%f105, %f2, %f103;
	mul.ftz.f32 	%f106, %f1, %f103;
	st.global.v2.f32 	[geometric_normal], {%f106, %f105};
	st.global.f32 	[geometric_normal+8], %f104;
	mov.u64 	%rd71, tindex_buffer;
	cvta.global.u64 	%rd61, %rd71;
	// inline asm
	call (%rd60), _rt_buffer_get_64, (%rd61, %r13, %r14, %rd4, %rd25, %rd25, %rd25);
	// inline asm
	ld.u32 	%r6, [%rd60+8];
	ld.u32 	%r5, [%rd60+4];
	ld.u32 	%r4, [%rd60];
	mov.u64 	%rd72, texcoord_buffer;
	cvta.global.u64 	%rd70, %rd72;
	mov.u32 	%r30, 8;
	// inline asm
	call (%rd66, %rd67, %rd68, %rd69), _rt_buffer_get_size_64, (%rd70, %r13, %r30);
	// inline asm
	cvt.u32.u64	%r31, %rd66;
	setp.eq.s32	%p18, %r31, 0;
	setp.lt.s32	%p19, %r4, 0;
	or.pred  	%p20, %p18, %p19;
	setp.lt.s32	%p21, %r5, 0;
	or.pred  	%p22, %p20, %p21;
	setp.lt.s32	%p23, %r6, 0;
	or.pred  	%p24, %p22, %p23;
	@%p24 bra 	BB0_7;
	bra.uni 	BB0_6;

BB0_7:
	mov.u32 	%r39, 0;
	st.global.u32 	[texcoord+8], %r39;
	mov.f32 	%f128, 0f00000000;
	st.global.v2.f32 	[texcoord], {%f128, %f128};
	bra.uni 	BB0_8;

BB0_6:
	cvt.s64.s32	%rd75, %r4;
	// inline asm
	call (%rd73), _rt_buffer_get_64, (%rd70, %r13, %r30, %rd75, %rd25, %rd25, %rd25);
	// inline asm
	ld.v2.f32 	{%f107, %f108}, [%rd73];
	cvt.s64.s32	%rd81, %r5;
	// inline asm
	call (%rd79), _rt_buffer_get_64, (%rd70, %r13, %r30, %rd81, %rd25, %rd25, %rd25);
	// inline asm
	ld.v2.f32 	{%f111, %f112}, [%rd79];
	cvt.s64.s32	%rd87, %r6;
	// inline asm
	call (%rd85), _rt_buffer_get_64, (%rd70, %r13, %r30, %rd87, %rd25, %rd25, %rd25);
	// inline asm
	ld.v2.f32 	{%f115, %f116}, [%rd85];
	mul.ftz.f32 	%f119, %f5, %f115;
	mul.ftz.f32 	%f120, %f5, %f116;
	fma.rn.ftz.f32 	%f121, %f4, %f111, %f119;
	fma.rn.ftz.f32 	%f122, %f4, %f112, %f120;
	mov.f32 	%f123, 0f3F800000;
	sub.ftz.f32 	%f124, %f123, %f4;
	sub.ftz.f32 	%f125, %f124, %f5;
	fma.rn.ftz.f32 	%f126, %f125, %f108, %f122;
	fma.rn.ftz.f32 	%f127, %f125, %f107, %f121;
	st.global.v2.f32 	[texcoord], {%f127, %f126};
	mov.u32 	%r38, 0;
	st.global.u32 	[texcoord+8], %r38;

BB0_8:
	mov.u64 	%rd98, material_buffer;
	cvta.global.u64 	%rd93, %rd98;
	mov.u32 	%r41, 4;
	// inline asm
	call (%rd92), _rt_buffer_get_64, (%rd93, %r13, %r41, %rd4, %rd25, %rd25, %rd25);
	// inline asm
	ld.u32 	%r43, [%rd92];
	// inline asm
	call (%r42), _rt_report_intersection, (%r43);
	// inline asm

BB0_9:
	ret;
}

	// .globl	_Z11mesh_boundsiPf
.visible .entry _Z11mesh_boundsiPf(
	.param .u32 _Z11mesh_boundsiPf_param_0,
	.param .u64 _Z11mesh_boundsiPf_param_1
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<43>;
	.reg .s32 	%r<11>;
	.reg .s64 	%rd<30>;


	ld.param.u64 	%rd3, [_Z11mesh_boundsiPf_param_1];
	ld.param.s32 	%rd6, [_Z11mesh_boundsiPf_param_0];
	mov.u64 	%rd28, vindex_buffer;
	cvta.global.u64 	%rd5, %rd28;
	mov.u32 	%r7, 1;
	mov.u32 	%r8, 12;
	mov.u64 	%rd27, 0;
	// inline asm
	call (%rd4), _rt_buffer_get_64, (%rd5, %r7, %r8, %rd6, %rd27, %rd27, %rd27);
	// inline asm
	ld.s32 	%rd12, [%rd4];
	mov.u64 	%rd29, vertex_buffer;
	cvta.global.u64 	%rd11, %rd29;
	ld.s32 	%rd18, [%rd4+4];
	ld.s32 	%rd24, [%rd4+8];
	// inline asm
	call (%rd10), _rt_buffer_get_64, (%rd11, %r7, %r8, %rd12, %rd27, %rd27, %rd27);
	// inline asm
	ld.f32 	%f4, [%rd10+8];
	ld.f32 	%f2, [%rd10+4];
	ld.f32 	%f1, [%rd10];
	// inline asm
	call (%rd16), _rt_buffer_get_64, (%rd11, %r7, %r8, %rd18, %rd27, %rd27, %rd27);
	// inline asm
	ld.f32 	%f7, [%rd16+8];
	ld.f32 	%f6, [%rd16+4];
	ld.f32 	%f5, [%rd16];
	// inline asm
	call (%rd22), _rt_buffer_get_64, (%rd11, %r7, %r8, %rd24, %rd27, %rd27, %rd27);
	// inline asm
	sub.ftz.f32 	%f12, %f5, %f1;
	sub.ftz.f32 	%f13, %f6, %f2;
	sub.ftz.f32 	%f14, %f7, %f4;
	ld.f32 	%f10, [%rd22+8];
	ld.f32 	%f9, [%rd22+4];
	ld.f32 	%f8, [%rd22];
	sub.ftz.f32 	%f15, %f8, %f1;
	sub.ftz.f32 	%f16, %f9, %f2;
	sub.ftz.f32 	%f17, %f10, %f4;
	mul.ftz.f32 	%f18, %f13, %f17;
	mul.ftz.f32 	%f19, %f14, %f16;
	sub.ftz.f32 	%f20, %f18, %f19;
	mul.ftz.f32 	%f21, %f14, %f15;
	mul.ftz.f32 	%f22, %f12, %f17;
	sub.ftz.f32 	%f23, %f21, %f22;
	mul.ftz.f32 	%f24, %f12, %f16;
	mul.ftz.f32 	%f25, %f13, %f15;
	sub.ftz.f32 	%f26, %f24, %f25;
	mul.ftz.f32 	%f27, %f23, %f23;
	fma.rn.ftz.f32 	%f28, %f20, %f20, %f27;
	fma.rn.ftz.f32 	%f29, %f26, %f26, %f28;
	sqrt.approx.ftz.f32 	%f11, %f29;
	mov.pred 	%p5, 0;
	setp.leu.ftz.f32	%p4, %f11, 0f00000000;
	@%p4 bra 	BB1_2;

	abs.ftz.f32 	%f30, %f11;
	setp.neu.ftz.f32	%p5, %f30, 0f7F800000;

BB1_2:
	cvta.to.global.u64 	%rd2, %rd3;
	@%p5 bra 	BB1_4;
	bra.uni 	BB1_3;

BB1_4:
	min.ftz.f32 	%f31, %f1, %f5;
	min.ftz.f32 	%f32, %f2, %f6;
	min.ftz.f32 	%f33, %f31, %f8;
	min.ftz.f32 	%f34, %f32, %f9;
	min.ftz.f32 	%f35, %f4, %f7;
	min.ftz.f32 	%f36, %f35, %f10;
	st.global.f32 	[%rd2], %f33;
	st.global.f32 	[%rd2+4], %f34;
	st.global.f32 	[%rd2+8], %f36;
	max.ftz.f32 	%f37, %f1, %f5;
	max.ftz.f32 	%f38, %f2, %f6;
	max.ftz.f32 	%f39, %f37, %f8;
	max.ftz.f32 	%f40, %f38, %f9;
	max.ftz.f32 	%f41, %f4, %f7;
	max.ftz.f32 	%f42, %f41, %f10;
	st.global.f32 	[%rd2+12], %f39;
	st.global.f32 	[%rd2+16], %f40;
	st.global.f32 	[%rd2+20], %f42;
	bra.uni 	BB1_5;

BB1_3:
	mov.u32 	%r9, 2096152002;
	st.global.u32 	[%rd2+8], %r9;
	st.global.u32 	[%rd2+4], %r9;
	st.global.u32 	[%rd2], %r9;
	mov.u32 	%r10, -51331646;
	st.global.u32 	[%rd2+20], %r10;
	st.global.u32 	[%rd2+16], %r10;
	st.global.u32 	[%rd2+12], %r10;

BB1_5:
	ret;
}

	// .globl	_ZN5optix3RayC1Ev
.visible .func _ZN5optix3RayC1Ev(
	.param .b64 _ZN5optix3RayC1Ev_param_0
)
{



	ret;
}

	// .globl	_ZN5optix3RayC2Ev
.visible .func _ZN5optix3RayC2Ev(
	.param .b64 _ZN5optix3RayC2Ev_param_0
)
{



	ret;
}


